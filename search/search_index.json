{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This project is in no way affiliated with <code>basketball-reference.com</code> (and I  hope the fine folks at Basketball Reference do not get too upset at me for creating and maintaining this project).</p> <p>Please use this project responsibly as Basketball Reference is a very useful resource.</p>"},{"location":"#background","title":"Background","text":"<p>This library was created for another Python project where I was trying to estimate an NBA player's productivity  (for, uh, daily fantasy sports \"science\").</p> <p>A lot of sports-related APIs are expensive - luckily, Basketball Reference provides a free service which can be scraped  and translated into a usable API.</p>"},{"location":"#installation","title":"Installation","text":"<p>This project is published to <code>PyPi</code>.</p> <p>It can be installed via <code>pip</code>.</p> <pre><code>pip install basketball_reference_web_scraper\n</code></pre> <p>Note</p> <p>This library requires <code>Python 3.7+</code> </p> <p>Note</p> <p>Currently, only data from seasons after the <code>1999-2000</code> season is supported</p> <p>Note</p> <p>There are currently two supported major versions - <code>3+</code> and <code>4+</code>.</p>"},{"location":"#contributors","title":"Contributors","text":"<p>This is an open-source project that welcomes all pull requests and issues - I would love to hear your thoughts and  ideas around making this project even better.</p> <p>Thanks to @DaiJunyan, @ecallahan5,  @Yotamho, @ntsirakis, @allanbelliti, @krlu, and @aaronbannin for their contributions!</p>"},{"location":"api/","title":"API","text":""},{"location":"api/#client","title":"Client","text":"<p>The <code>import</code>ed <code>client</code> contains the API methods that will access Basketball Reference</p> <pre><code>from basketball_reference_web_scraper import client\n</code></pre>"},{"location":"api/#enums","title":"Enums","text":"<p>Various <code>enum</code> values are returned as part of the result set for API methods or as inputs for various API methods.</p> <p>They are <code>import</code>ed from the <code>data</code> path.</p> League <pre><code>from basketball_reference_web_scraper.data import League\n</code></pre> <p>Note</p> <p>Represents the league designated by Basketball Reference.</p> <p>The values are <code>League.NATIONAL_BASKETBALL_ASSOCIATION</code>, <code>League.AMERICAN_BASKETBALL_ASSOCIATION</code>, and  <code>League.BASKETBALL_ASSOCIATION_OF_AMERICA</code>.</p> Location <pre><code>from basketball_reference_web_scraper.data import Location \n</code></pre> <p>Note</p> <p>Represents whether a game was played at home or away. </p> <p>The two possible values are <code>Location.HOME</code> and <code>Location.AWAY</code></p> Outcome <pre><code>from basketball_reference_web_scraper.data import Outcome \n</code></pre> <p>Note</p> <p>Represents if a game ended in a win or a loss. </p> <p>The two possible values are <code>Outcome.WIN</code> and <code>Outcome.LOSS</code></p> OutputType <pre><code>from basketball_reference_web_scraper.data import OutputType \n</code></pre> <p>Note</p> <p>Represents the type of data output.</p> <p>The two possible values are <code>OutputType.JSON</code> and <code>OutputType.CSV</code></p> OutputWriteOption <pre><code>from basketball_reference_web_scraper.data import OutputWriteOption \n</code></pre> <p>Note</p> <p>Represents Python file modes when outputting data.</p> <p>The four possible values are <code>OutputWriteOption.WRITE</code>, <code>OutputWriteOption.CREATE_AND_WRITE</code>,  <code>OutputWriteOption.APPEND</code>, and <code>OutputWriteOption.APPEND_AND_WRITE</code> </p> Position <pre><code>from basketball_reference_web_scraper.data import Position \n</code></pre> <p>Note</p> <p>Represents one of the seven positon designations (<code>Position.POINT_GUARD</code>, <code>Position.SHOOTING_GUARD</code>, <code>Position.SMALL_FORWARD</code>,  <code>Position.POWER_FORWARD</code>, <code>Position.CENTER</code>, <code>Position.FORWARD</code>, <code>Position.GUARD</code>) in Basketball Reference</p> PeriodType <pre><code>from basketball_reference_web_scraper.data import PeriodType \n</code></pre> <p>Note</p> <p>Represents if a period was a quarter (<code>PeriodType.QUARTER</code>) or an overtime period (<code>PeriodType.OVERTIME</code>)</p> Team <pre><code>from basketball_reference_web_scraper.data import Team\n</code></pre> <p>Note</p> <p>Represents a team in the NBA (for example, <code>Team.BOSTON_CELTICS</code>).</p>"},{"location":"api/#output","title":"Output","text":"<p>The default data returned by API methods are Python objects (e.g. a <code>list</code> of <code>dictionaries</code>).</p> <p>All API methods come with <code>output_type</code>, <code>output_file_path</code>, <code>output_write_option</code>, and <code>json_options</code> arguments that are optional, and by default, are <code>None</code>.</p> <p>These arguments can be used to specify <code>JSON</code> / <code>CSV</code> output that may be written to a file.</p> <p>Use the <code>OutputType</code> <code>enum</code> as the <code>output_type</code> value to specify <code>CSV</code> or <code>JSON</code> output.</p> <p>The <code>output_file_path</code> argument takes a string and specifies where the result output should be written.</p> <p>Warning</p> <p>Currently, specifying an <code>output_type</code> of <code>OutputType.CSV</code> requires an <code>output_file_path</code> value.</p> <p><code>JSON</code> output can be returned by API methods without having to be written to a file.</p> <p>Use the <code>OutputWriteOption</code> <code>enum</code> as the <code>output_write_option</code> value to specify if the result output should be written, or appended to the specified file path (or any of other the Python file mode options).</p> <p>Note</p> <p>The default <code>OutputWriteOption</code> if it is not specified (but an <code>output_file_path</code> value is specified) is  <code>OutputWriteOption.WRITE</code>.</p>"},{"location":"api/#methods","title":"Methods","text":""},{"location":"api/#player-box-scores-for-a-given-day","title":"Player Box Scores For A Given Day","text":"<ul> <li><code>repl.it</code> Examples</li> </ul> Python Data Structures <pre><code>from basketball_reference_web_scraper import client\n\nclient.player_box_scores(day=1, month=1, year=2017)\n</code></pre> JSON <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.player_box_scores(day=1, month=1, year=2017, output_type=OutputType.JSON)\n</code></pre> JSON to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.player_box_scores(\n    day=1, month=1, year=2017, \n    output_type=OutputType.JSON, \n    output_file_path=\"./1_1_2017_box_scores.json\"\n)\n</code></pre> CSV to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.player_box_scores(\n    day=1, month=1, year=2017, \n    output_type=OutputType.CSV, \n    output_file_path=\"./1_1_2017_box_scores.csv\"\n)\n</code></pre>"},{"location":"api/#team-box-scores-for-a-given-day","title":"Team Box Scores For A Given Day","text":"<ul> <li><code>repl.it</code> Examples</li> </ul> Python Data Structures <pre><code>from basketball_reference_web_scraper import client\n\nclient.team_box_scores(day=1, month=1, year=2018)\n</code></pre> JSON <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.team_box_scores(day=1, month=1, year=2017, output_type=OutputType.JSON)\n</code></pre> JSON to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.team_box_scores(\n    day=1, month=1, year=2017, \n    output_type=OutputType.JSON, \n    output_file_path=\"./1_1_2017_box_scores.json\"\n)\n</code></pre> CSV to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.team_box_scores(\n    day=1, month=1, year=2017, \n    output_type=OutputType.CSV, \n    output_file_path=\"./1_1_2017_box_scores.csv\"\n)\n</code></pre>"},{"location":"api/#get-season-schedule","title":"Get Season Schedule","text":"<ul> <li><code>repl.it</code> Examples</li> </ul> Python Data Structures <pre><code>from basketball_reference_web_scraper import client\n\nclient.season_schedule(season_end_year=2018)\n</code></pre> JSON <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.season_schedule(season_end_year=2018, output_type=OutputType.JSON)\n</code></pre> JSON to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.season_schedule(\n    season_end_year=2018, \n    output_type=OutputType.JSON, \n    output_file_path=\"./2017_2018_season.json\"\n)\n</code></pre> CSV to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.season_schedule(\n    season_end_year=2018, \n    output_type=OutputType.CSV, \n    output_file_path=\"./2017_2018_season.csv\"\n)\n</code></pre>"},{"location":"api/#player-season-totals-basic-statistics","title":"Player Season Totals (Basic Statistics)","text":"<ul> <li><code>repl.it</code> Examples</li> </ul> Python Data Structures <pre><code>from basketball_reference_web_scraper import client\n\nclient.players_season_totals(season_end_year=2018)\n</code></pre> JSON <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.players_season_totals(season_end_year=2018, output_type=OutputType.JSON)\n</code></pre> JSON to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.players_season_totals(\n    season_end_year=2018, \n    output_type=OutputType.JSON, \n    output_file_path=\"./2017_2018_player_season_totals.json\"\n)\n</code></pre> CSV to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.players_season_totals(\n    season_end_year=2018, \n    output_type=OutputType.CSV, \n    output_file_path=\"./2017_2018_player_season_totals.csv\"\n)\n</code></pre>"},{"location":"api/#player-season-totals-advanced-statistics","title":"Player Season Totals (Advanced Statistics)","text":"<ul> <li><code>repl.it</code> Examples</li> </ul> Python Data Structures <pre><code>from basketball_reference_web_scraper import client\n\nclient.players_advanced_season_totals(season_end_year=2018)\n</code></pre> JSON <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.players_advanced_season_totals(season_end_year=2018, output_type=OutputType.JSON)\n</code></pre> JSON to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.players_advanced_season_totals(\n    season_end_year=2018, \n    output_type=OutputType.JSON, \n    output_file_path=\"./2017_2018_advanced_player_season_totals.json\"\n)\n</code></pre> CSV to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.players_advanced_season_totals(\n    season_end_year=2018,\n    output_type=OutputType.CSV,\n    output_file_path=\"./2017_2018_advanced_player_season_totals.csv\"\n)\n</code></pre>"},{"location":"api/#play-by-play","title":"Play-By-Play","text":"<ul> <li><code>repl.it</code> Examples</li> </ul> <p>Note</p> <p>The structure of the API is due to the unique URL pattern that Basketball Reference has for getting play-by-play  data which depends on the date of the game and the home team.</p> Python Data Structures <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import Team\n\nclient.play_by_play(home_team=Team.BOSTON_CELTICS, year=2018, month=10, day=16)\n</code></pre> JSON <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType, Team\n\nclient.play_by_play(\n    home_team=Team.BOSTON_CELTICS, \n    year=2018, month=10, day=16, \n    output_type=OutputType.JSON\n)\n</code></pre> JSON to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType, Team\n\nclient.play_by_play(\n    home_team=Team.BOSTON_CELTICS, \n    year=2018, month=10, day=16, \n    output_type=OutputType.JSON, \n    output_file_path=\"./2018_10_06_BOS_PBP.json\"\n)\n</code></pre> CSV to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType, Team\n\nclient.play_by_play(\n    home_team=Team.BOSTON_CELTICS, \n    year=2018, month=10, day=16, \n    output_type=OutputType.CSV, \n    output_file_path=\"./2018_10_06_BOS_PBP.csv\"\n)\n</code></pre>"},{"location":"api/#regular-season-player-box-scores","title":"Regular Season Player Box Scores","text":"<p>Note</p> <p>The <code>player_identifier</code> is Basketball Reference's unique identifier for each player. </p> <p>In the case of Russell Westbrook, their <code>player_identifier</code> is <code>westbru01</code>.</p> <p>You can see this from their player page URL: https://www.basketball-reference.com/players/w/westbru01/gamelog/2020.</p> <ul> <li><code>repl.it</code> Examples</li> </ul> Python Data Structures <pre><code>from basketball_reference_web_scraper import client\n\nclient.regular_season_player_box_scores(\n    player_identifier=\"westbru01\", \n    season_end_year=2018\n)\n</code></pre> JSON <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.regular_season_player_box_scores(\n    player_identifier=\"westbru01\", \n    season_end_year=2018, \n    output_type=OutputType.JSON\n)\n</code></pre> JSON to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.regular_season_player_box_scores(\n    player_identifier=\"westbru01\", \n    season_end_year=2018, \n    output_type=OutputType.JSON,\n    output_file_path=\"./2017_2018_russell_westbrook_regular_season_box_scores.json\"\n)\n</code></pre> CSV to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.regular_season_player_box_scores(\n    player_identifier=\"westbru01\", \n    season_end_year=2018, \n    output_type=OutputType.CSV, \n    output_file_path=\"./2017_2018_russell_westbrook_regular_season_box_scores.csv\"\n)\n</code></pre>"},{"location":"api/#playoff-player-box-scores","title":"Playoff Player Box Scores","text":"<p>Note</p> <p>The <code>player_identifier</code> is Basketball Reference's unique identifier for each player. </p> <p>In the case of Russell Westbrook, their <code>player_identifier</code> is <code>westbru01</code>.</p> <p>You can see this from their player page URL: https://www.basketball-reference.com/players/w/westbru01/gamelog/2020.</p> <ul> <li><code>repl.it</code> Examples</li> </ul> Python Data Structures <pre><code>from basketball_reference_web_scraper import client\n\nclient.playoff_player_box_scores(\n    player_identifier=\"westbru01\", \n    season_end_year=2018\n)\n</code></pre> JSON <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.playoff_player_box_scores(\n    player_identifier=\"westbru01\", \n    season_end_year=2018, \n    output_type=OutputType.JSON\n)\n</code></pre> JSON to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.playoff_player_box_scores(\n    player_identifier=\"westbru01\", \n    season_end_year=2018, \n    output_type=OutputType.JSON,\n    output_file_path=\"./2017_2018_russell_westbrook_playoff_box_scores.json\"\n)\n</code></pre> CSV to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.playoff_player_box_scores(\n    player_identifier=\"westbru01\", \n    season_end_year=2018, \n    output_type=OutputType.CSV, \n    output_file_path=\"./2017_2018_russell_westbrook_playoff_box_scores.csv\"\n)\n</code></pre>"},{"location":"api/#search","title":"Search","text":"<ul> <li><code>repl.it</code> Examples</li> </ul> Python Data Structures <pre><code>from basketball_reference_web_scraper import client\n\nclient.search(term=\"Ko\")\n</code></pre> JSON <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.search(term=\"Ko\", output_type=OutputType.JSON)\n</code></pre> JSON to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.search(\n    term=\"Ko\",\n    output_type=OutputType.JSON, \n    output_file_path=\"./1_1_2017_box_scores.json\"\n)\n</code></pre> CSV to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.search(\n    term=\"Ko\",\n    output_type=OutputType.CSV, \n    output_file_path=\"./1_1_2017_box_scores.csv\"\n)\n</code></pre>"},{"location":"api/#standings","title":"Standings","text":"<ul> <li><code>repl.it</code> Examples</li> </ul> Python Data Structures <pre><code>from basketball_reference_web_scraper import client\n\nclient.standings(season_end_year=2019)\n</code></pre> JSON <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.standings(season_end_year=2019, output_type=OutputType.JSON)\n</code></pre> JSON to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.standings(\n    season_end_year=2019,\n    output_type=OutputType.JSON, \n    output_file_path=\"./2019_standings.json\"\n)\n</code></pre> CSV to file <pre><code>from basketball_reference_web_scraper import client\nfrom basketball_reference_web_scraper.data import OutputType\n\nclient.standings(\n    season_end_year=2019,\n    output_type=OutputType.CSV, \n    output_file_path=\"./2019_standings.csv\"\n)\n</code></pre>"},{"location":"development/","title":"Development","text":""},{"location":"development/#branches","title":"Branches","text":"<p>There are two branches, <code>v3</code> and <code>v4</code>, which map to the <code>3+</code> and <code>4+</code> versions, respectively. These are the defacto  branches to branch from when developing features.</p> <p>The <code>v3</code> branch (as well as the <code>3+</code> version) will be deprecated in the near-future.</p> <p><code>master</code> will reflect the latest major version branch.</p>"},{"location":"development/#local","title":"Local","text":"<p>Install dependencies using <code>poetry</code> - for installation directions, see  the documentation.</p> <p>Once <code>poetry</code> has been installed, dependencies can be installed using the <code>install</code> command like</p> <pre><code>poetry install\n</code></pre> <p>Note</p> <p>The <code>pyproject.toml</code> file is used to describe the project's requirements and relevant metadata including both the project's dependencies and it's development dependencies (like for generating code coverage, and this documentation  site)</p>"},{"location":"development/#testing","title":"Testing","text":"<p>Unit tests are organized in the <code>unit</code> directory under the <code>tests</code> directory while integration tests are organized  under the <code>integration</code> directory.</p> <p>In the cases where tests are extensive (like integration tests for an API method), each of these tests are grouped in a  separate file, even if they are implemented in the same file.</p> <p>This is why API methods have their own integration test file under the <code>client</code> directory even though they are all  implemented in the <code>client.py</code> file.</p> <p>Warning</p> <p>Sometimes the suite of integration tests run into rate-limiting errors - I'm currently thinking of ways to mitigate this behavior.</p> <p>Currently, this project uses Codecov for code  coverage statistics.</p>"},{"location":"development/#continuous-integration","title":"Continuous Integration","text":"<p>GitHub Actions is used for continuous  integration to run tests on a variety of operating systems.</p>"}]}